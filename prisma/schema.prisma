// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  couples           Couple[]
  sentMessages      Message[]
  receivedMessages  MessageRecipient[]
  pushSubscriptions PushSubscription[]

  @@map("users")
}

model Couple {
  id                    String   @id @default(cuid())
  userId                String
  partnerName           String?
  weddingDate           DateTime?
  venue                 String?
  location              String?
  expectedGuests        Int?
  totalBudget           Decimal? @db.Decimal(10, 2)
  weddingStyle          String?
  onboardingCompleted   Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  guests            Guest[]
  vendors           Vendor[]
  budgetCategories  BudgetCategory[]
  budgetExpenses    BudgetExpense[]
  photoAlbums       PhotoAlbum[]
  photos            Photo[]
  checklistItems    ChecklistItem[]
  messages          Message[]
  notificationLogs  NotificationLog[]

  @@map("couples")
}

model Guest {
  id               String            @id @default(cuid())
  coupleId         String
  name             String
  email            String?
  phone            String?
  relationship     String?
  side             String?           // bride, groom, mutual
  plusOne          Boolean           @default(false)
  rsvpStatus       String            @default("pending") // pending, confirmed, declined
  invitationCode   String?           @unique
  dietaryNotes     String?
  specialRequests  String?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  messageRecipients MessageRecipient[]

  @@map("guests")
}

model Vendor {
  id               String            @id @default(cuid())
  coupleId         String
  businessName     String
  contactName      String?
  email            String?
  phone            String?
  website          String?
  category         String
  status           String            @default("potential") // potential, contacted, quoted, booked, completed
  estimatedCost    Decimal?          @db.Decimal(10, 2)
  actualCost       Decimal?          @db.Decimal(10, 2)
  contractSigned   Boolean           @default(false)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  budgetExpenses   BudgetExpense[]
  messageRecipients MessageRecipient[]

  @@map("vendors")
}

model BudgetCategory {
  id               String            @id @default(cuid())
  coupleId         String
  name             String
  allocatedAmount  Decimal           @db.Decimal(10, 2)
  priority         String            @default("medium") // high, medium, low
  color            String?
  icon             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  expenses         BudgetExpense[]

  @@map("budget_categories")
}

model BudgetExpense {
  id               String            @id @default(cuid())
  coupleId         String
  categoryId       String
  vendorId         String?
  name             String
  amount           Decimal           @db.Decimal(10, 2)
  description      String?
  date             DateTime          @default(now())
  isPaid           Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  category         BudgetCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendor           Vendor?           @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  @@map("budget_expenses")
}

model PhotoAlbum {
  id               String            @id @default(cuid())
  coupleId         String
  name             String
  description      String?
  coverPhotoId     String?
  sortOrder        Int               @default(0)
  isPublic         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  photos           Photo[]

  @@map("photo_albums")
}

model Photo {
  id               String            @id @default(cuid())
  coupleId         String
  albumId          String?
  filename         String
  originalName     String
  cloudinaryId     String
  url              String
  thumbnailUrl     String?
  description      String?
  tags             String[]
  uploadedBy       String?
  sortOrder        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  album            PhotoAlbum?       @relation(fields: [albumId], references: [id], onDelete: SetNull)

  @@map("photos")
}

model ChecklistItem {
  id               String            @id @default(cuid())
  coupleId         String
  title            String
  description      String?
  category         String
  timeframe        String            // 12+ months, 6-12 months, etc.
  priority         String            @default("medium") // high, medium, low
  isCompleted      Boolean           @default(false)
  completedAt      DateTime?
  dueDate          DateTime?
  sortOrder        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model Message {
  id               String            @id @default(cuid())
  coupleId         String
  senderId         String
  subject          String?
  content          String
  messageType      String            // email, sms, whatsapp
  templateId       String?
  scheduledFor     DateTime?
  sentAt           DateTime?
  status           String            @default("draft") // draft, scheduled, sent, failed
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  sender           User              @relation(fields: [senderId], references: [id], onDelete: Cascade)
  recipients       MessageRecipient[]

  @@map("messages")
}

model MessageRecipient {
  id               String            @id @default(cuid())
  messageId        String
  recipientType    String            // guest, vendor, user
  guestId          String?
  vendorId         String?
  userId           String?
  email            String?
  phone            String?
  status           String            @default("pending") // pending, sent, delivered, failed
  deliveredAt      DateTime?
  readAt           DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  message          Message           @relation(fields: [messageId], references: [id], onDelete: Cascade)
  guest            Guest?            @relation(fields: [guestId], references: [id], onDelete: Cascade)
  vendor           Vendor?           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message_recipients")
}

model MessageTemplate {
  id               String            @id @default(cuid())
  name             String
  category         String
  subject          String?
  content          String
  messageType      String            // email, sms, whatsapp
  variables        String[]          // Available template variables
  isDefault        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("message_templates")
}

model PushSubscription {
  id               String            @id @default(cuid())
  userId           String
  endpoint         String
  p256dh           String
  auth             String
  userAgent        String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

model NotificationLog {
  id               String            @id @default(cuid())
  coupleId         String
  type             String            // push, email, sms
  title            String
  message          String
  status           String            @default("sent") // sent, failed, pending
  sentAt           DateTime          @default(now())
  metadata         Json?
  createdAt        DateTime          @default(now())

  // Relationships
  couple           Couple            @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("notification_logs")
}