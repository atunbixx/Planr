// Simplified Prisma schema for wedding planner v2
// Focus on core entities needed for onboarding

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Users table for authentication
model User {
  id            String    @id @default(uuid())
  clerk_user_id String    @unique
  email         String    @unique
  first_name    String?
  last_name     String?
  phone         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relations
  couple        Couple?
  
  @@map("users")
}

// Couples table for onboarding data
model Couple {
  id                    String    @id @default(uuid())
  user_id               String    @unique
  partner1_name         String?
  partner2_name         String?
  wedding_style         String?
  wedding_date          DateTime? @db.Date
  venue_name            String?
  venue_location        String?
  guest_count_estimate  Int?
  budget_total          Decimal?  @db.Decimal(12, 2)
  onboarding_completed  Boolean   @default(false)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  // Relations
  user                  User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  messageTemplates      MessageTemplate[]
  messageLogs           MessageLog[]
  scheduledMessages     ScheduledMessage[]
  messagePreferences    MessagePreference[]
  
  @@map("couples")
}

// Message Templates
model MessageTemplate {
  id          String   @id @default(uuid())
  couple_id   String?
  name        String
  description String?
  type        String   // 'email', 'sms', 'whatsapp'
  subject     String?  // For emails
  body        String
  variables   String[] // Array of variable names like ['guestName', 'weddingDate']
  is_system   Boolean  @default(false)
  category    String?  // 'invitation', 'reminder', 'confirmation', etc.
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  couple            Couple?            @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  messageLogs       MessageLog[]
  scheduledMessages ScheduledMessage[]
  
  @@map("message_templates")
}

// Message Logs
model MessageLog {
  id               String    @id @default(uuid())
  couple_id        String
  message_type     String    // 'email', 'sms', 'whatsapp'
  recipient_type   String    // 'guest', 'vendor'
  recipient_id     String?   // ID of guest or vendor
  recipient_email  String?
  recipient_phone  String?
  subject          String?   // For emails
  body             String
  template_id      String?
  variables        Json?     // Variables used in template
  status           String    @default("pending") // 'pending', 'sent', 'delivered', 'failed', 'bounced'
  external_id      String?   // Twilio MessageSid or Resend email ID
  error_message    String?
  delivered_at     DateTime?
  opened_at        DateTime?
  clicked_at       DateTime?
  scheduled_for    DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  
  // Relations
  couple           Couple    @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  template         MessageTemplate? @relation(fields: [template_id], references: [id])
  
  @@map("message_logs")
}

// Scheduled Messages
model ScheduledMessage {
  id              String    @id @default(uuid())
  couple_id       String
  message_type    String    // 'email', 'sms', 'whatsapp'
  recipient_type  String    // 'guest', 'vendor'
  recipient_ids   String[]  // Array of recipient IDs
  subject         String?   // For emails
  body            String
  template_id     String?
  variables       Json?     // Variables for template
  scheduled_for   DateTime
  status          String    @default("pending") // 'pending', 'sent', 'cancelled'
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  couple          Couple    @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  template        MessageTemplate? @relation(fields: [template_id], references: [id])
  
  @@map("scheduled_messages")
}

// Message Preferences (opt-in/opt-out)
model MessagePreference {
  id              String   @id @default(uuid())
  couple_id       String
  contact_type    String   // 'email', 'sms', 'whatsapp'
  contact_value   String   // email address or phone number
  opted_in        Boolean  @default(true)
  unsubscribe_token String? @unique
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relations
  couple          Couple   @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  
  @@unique([couple_id, contact_type, contact_value])
  @@map("message_preferences")
}