generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supabase_user_id String    @unique(map: "users_clerk_user_id_key") @map("supabase_user_id") @db.VarChar
  email            String    @unique @db.VarChar
  firstName        String?   @map("first_name") @db.VarChar
  lastName         String?   @map("last_name") @db.VarChar
  phone            String?   @db.VarChar
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  preferences      Json?

  // Relationships
  coupleAsPartner1          Couple[]                   @relation("CouplePartner1")
  coupleAsPartner2          Couple[]                   @relation("CouplePartner2")
  coupleAsPrimary           Couple?
  notifications             Notification[]
  notificationPreferences   NotificationPreferences?

  @@map("users")
}

model Couple {
  id                  String             @id(map: "couples_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  partner1_user_id    String?            @db.Uuid
  partner2_user_id    String?            @db.Uuid
  partner1Name        String             @map("partner1_name") @db.VarChar(100)
  partner2Name        String?            @map("partner2_name") @db.VarChar(100)
  weddingDate         DateTime?          @map("wedding_date") @db.Date
  venueName           String?            @map("venue_name") @db.VarChar(200)
  venueLocation       String?            @map("venue_location") @db.VarChar(200)
  guestCountEstimate  Int?               @default(100) @map("guest_count_estimate")
  totalBudget         Decimal?           @default(50000.00) @map("total_budget") @db.Decimal(10, 2)
  currency            String?            @default("USD") @db.VarChar(3)
  weddingStyle        String?            @default("traditional") @map("wedding_style") @db.VarChar(50)
  createdAt           DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  budget_total        Decimal?           @db.Decimal(10, 2)
  onboardingCompleted Boolean?           @default(false) @map("onboarding_completed")
  userId              String?            @unique @map("user_id") @db.Uuid
  
  // Relationships
  partner1            User?              @relation("CouplePartner1", fields: [partner1_user_id], references: [id])
  partner2            User?              @relation("CouplePartner2", fields: [partner2_user_id], references: [id])
  primaryUser         User?              @relation(fields: [userId], references: [id])
  
  guests              Guest[]
  invitations         Invitation[]
  photoAlbums         PhotoAlbum[]
  vendor_documents    vendor_documents[]
  vendors             Vendor[]
  notifications       Notification[]

  @@map("couples")
}

model Guest {
  id                  String                @id(map: "guests_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coupleId            String                @map("couple_id") @db.Uuid
  firstName           String                @map("first_name") @db.VarChar(100)
  lastName            String                @map("last_name") @db.VarChar(100)
  email               String?               @db.VarChar(255)
  phone               String?               @db.VarChar(20)
  address             String?
  relationship        String?               @db.VarChar(50)
  side                String?               @db.VarChar(10)
  plusOneAllowed      Boolean?              @default(false) @map("plus_one_allowed")
  plusOneName         String?               @map("plus_one_name") @db.VarChar(200)
  dietaryRestrictions String?               @map("dietary_restrictions")
  notes               String?
  createdAt           DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  attendingCount      Int                   @default(0)
  invitationSentAt    DateTime?
  rsvpDeadline        DateTime?
  guest_group_members guest_group_members[]
  couple              Couple                @relation(fields: [coupleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guests_couple_id_fkey1")
  invitations         Invitation[]

  @@map("guests")
}

model Invitation {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId             String    @map("guest_id") @db.Uuid
  couple_id           String    @db.Uuid
  invitationCode      String?   @unique @map("invitation_code") @db.VarChar(50)
  status              String?   @default("pending") @db.VarChar(20)
  attendingCount      Int?      @default(0) @map("attending_count")
  plusOneAttending    Boolean?  @map("plus_one_attending")
  plusOneName         String?   @map("plus_one_name") @db.VarChar(200)
  dietaryRestrictions String?   @map("dietary_restrictions")
  rsvpNotes           String?   @map("rsvp_notes")
  invited_at          DateTime? @default(now()) @db.Timestamptz(6)
  respondedAt         DateTime? @map("responded_at") @db.Timestamptz(6)
  rsvpDeadline        DateTime? @map("rsvp_deadline") @db.Date
  createdAt           DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  couples             Couple    @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  guest               Guest     @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("invitations")
}

model Vendor {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coupleId         String          @map("couple_id") @db.Uuid
  name             String
  contactName      String?         @map("contact_name")
  phone            String?
  email            String?
  website          String?
  address          String?
  categoryId       String?         @map("category_id") @db.Uuid
  status           String?         @default("potential") @db.VarChar(20)
  priority         String?         @default("medium") @db.VarChar(10)
  rating           Int?
  estimatedCost    Decimal?        @map("estimated_cost") @db.Decimal(10, 2)
  actualCost       Decimal?        @map("actual_cost") @db.Decimal(10, 2)
  notes            String?
  meetingDate      DateTime?       @map("meeting_date") @db.Date
  contractSigned   Boolean?        @default(false) @map("contract_signed")
  createdAt        DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?       @default(now()) @map("updated_at") @db.Timestamptz(6)
  vendorCategories VendorCategory? @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  couple           Couple          @relation(fields: [coupleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([categoryId], map: "idx_vendors_category_id")
  @@index([coupleId], map: "idx_vendors_couple_id")
  @@index([priority], map: "idx_vendors_priority")
  @@index([status], map: "idx_vendors_status")
  @@map("vendors")
}

model VendorCategory {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @unique @db.VarChar(100)
  icon             String?   @default("üè¢") @db.VarChar(10)
  color            String?   @default("#3B82F6") @db.VarChar(7)
  description      String?
  industry_typical Boolean?  @default(false)
  display_order    Int?      @default(0)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  vendors          Vendor[]

  @@map("vendor_categories")
}

model BudgetCategory {
  id                        String          @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  coupleId                  String          @map("couple_id") @db.Uuid
  name                      String          @db.VarChar(255)
  icon                      String?         @default("üí∞") @db.VarChar(10)
  color                     String?         @default("#667eea") @db.VarChar(7)
  allocatedAmount           Decimal?        @default(0) @map("allocated_amount") @db.Decimal(12, 2)
  spentAmount               Decimal?        @default(0) @map("spent_amount") @db.Decimal(12, 2)
  priority                  String?         @default("important") @db.VarChar(20)
  percentageOfTotal         Decimal?        @default(0) @map("percentage_of_total") @db.Decimal(5, 2)
  industryAveragePercentage Decimal?        @default(0) @map("industry_average_percentage") @db.Decimal(5, 2)
  marketTrends              Json?           @default("{}") @map("market_trends")
  vendorInsights            Json?           @default("{}") @map("vendor_insights")
  createdAt                 DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime?       @default(now()) @map("updated_at") @db.Timestamptz(6)
  couple                    wedding_couples @relation(fields: [coupleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  budgetExpenses            BudgetExpense[]

  @@index([coupleId], map: "idx_budget_categories_couple_id")
  @@index([priority], map: "idx_budget_categories_priority")
  @@map("budget_categories")
}

model BudgetExpense {
  id             String          @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  coupleId       String          @map("couple_id") @db.Uuid
  categoryId     String          @map("category_id") @db.Uuid
  vendorId       String?         @map("vendor_id") @db.Uuid
  description    String          @db.VarChar(500)
  amount         Decimal         @db.Decimal(12, 2)
  expenseType    String?         @default("actual") @map("expense_type") @db.VarChar(20)
  paymentStatus  String?         @default("pending") @map("payment_status") @db.VarChar(20)
  paymentMethod  String?         @map("payment_method") @db.VarChar(50)
  dueDate        DateTime?       @map("due_date") @db.Date
  paidDate       DateTime?       @map("paid_date") @db.Date
  receiptUrl     String?         @map("receipt_url")
  notes          String?
  createdAt      DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @map("updated_at") @db.Timestamptz(6)
  budgetCategory BudgetCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  couple         wedding_couples @relation(fields: [coupleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  receipts       receipts[]

  @@index([categoryId], map: "idx_budget_expenses_category_id")
  @@index([coupleId], map: "idx_budget_expenses_couple_id")
  @@index([dueDate], map: "idx_budget_expenses_due_date")
  @@index([expenseType], map: "idx_budget_expenses_expense_type")
  @@index([paidDate], map: "idx_budget_expenses_paid_date")
  @@index([paymentStatus], map: "idx_budget_expenses_payment_status")
  @@index([vendorId], map: "idx_budget_expenses_vendor_id")
  @@map("budget_expenses")
}

model PhotoAlbum {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coupleId     String         @map("couple_id") @db.Uuid
  name         String
  description  String?
  coverPhotoId String?        @map("cover_photo_id") @db.Uuid
  isPublic     Boolean?       @default(false) @map("is_public")
  isFeatured   Boolean?       @default(false) @map("is_featured")
  isShared     Boolean?       @default(false) @map("is_shared")
  sortOrder    Int?           @default(0) @map("sort_order")
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?      @default(now()) @map("updated_at") @db.Timestamptz(6)
  coverPhoto   Photo?         @relation("AlbumCoverPhoto", fields: [coverPhotoId], references: [id], onUpdate: NoAction, map: "fk_cover_photo")
  couple       Couple         @relation(fields: [coupleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  photo_shares photo_shares[]
  photos       Photo[]

  @@index([coupleId], map: "idx_photo_albums_couple_id")
  @@index([isPublic], map: "idx_photo_albums_is_public")
  @@map("photo_albums")
}

model Photo {
  id                  String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  coupleId            String            @map("couple_id") @db.Uuid
  createdAt           DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  title               String?
  caption             String?
  imageUrl            String            @map("image_url")
  photoDate           DateTime?         @map("photo_date") @db.Date
  photographer        String?
  location            String?
  tags                String[]
  albumId             String?           @map("album_id") @db.Uuid
  description         String?
  altText             String?           @map("alt_text")
  cloudinaryPublicId  String?           @map("cloudinary_public_id")
  cloudinaryUrl       String?           @map("cloudinary_url")
  cloudinarySecureUrl String?           @map("cloudinary_secure_url")
  originalFilename    String?           @map("original_filename")
  fileSize            Int?              @map("file_size")
  width               Int?
  height              Int?
  format              String?
  eventType           String?           @map("event_type")
  isFavorite          Boolean?          @default(false) @map("is_favorite")
  isPrivate           Boolean?          @default(false) @map("is_private")
  uploadedBy          String?           @map("uploaded_by") @db.Uuid
  updatedAt           DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  coverForAlbums      PhotoAlbum[]      @relation("AlbumCoverPhoto")
  photo_comments      photo_comments[]
  photo_reactions     photo_reactions[]
  photo_shares        photo_shares[]
  photoAlbums         PhotoAlbum?       @relation(fields: [albumId], references: [id], onUpdate: NoAction)
  couple              wedding_couples   @relation(fields: [coupleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([albumId], map: "idx_photos_album_id")
  @@index([coupleId], map: "idx_photos_couple_id")
  @@index([createdAt], map: "idx_photos_created_at")
  @@index([isFavorite], map: "idx_photos_is_favorite")
  @@index([tags], map: "idx_photos_tags", type: Gin)
  @@map("photos")
}

model Table {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id       String          @db.Uuid
  number          Int
  name            String?         @db.VarChar(255)
  capacity        Int             @default(8)
  shape           String?         @default("round") @db.VarChar(20)
  guest_ids       String[]        @default([]) @db.Uuid
  x_position      Float?
  y_position      Float?
  notes           String?
  createdAt       DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([couple_id, number])
  @@index([couple_id], map: "idx_tables_couple_id")
  @@index([couple_id, number], map: "idx_tables_number")
  @@map("tables")
}

model Message {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coupleId          String          @map("couple_id") @db.Uuid
  senderId          String          @map("sender_id") @db.Uuid
  sender_name       String          @db.VarChar(100)
  sender_email      String          @db.VarChar(255)
  recipient_id      String?         @db.Uuid
  recipient_name    String?         @db.VarChar(100)
  recipient_email   String?         @db.VarChar(255)
  vendor_id         String?         @db.Uuid
  subject           String          @db.VarChar(255)
  content           String
  messageType       String          @default("internal") @map("message_type") @db.VarChar(20)
  status            String          @default("sent") @db.VarChar(20)
  thread_id         String?         @db.Uuid
  parent_message_id String?         @db.Uuid
  attachments       String[]
  metadata          Json?           @default("{}")
  sentAt            DateTime        @map("sent_at") @db.Timestamptz(6)
  read_at           DateTime?       @db.Timestamptz(6)
  createdAt         DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  couple            wedding_couples @relation(fields: [coupleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages          Message?        @relation("messagesTomessages", fields: [parent_message_id], references: [id], onUpdate: NoAction)
  other_messages    Message[]       @relation("messagesTomessages")
  couple_vendors    couple_vendors? @relation(fields: [vendor_id], references: [id], onUpdate: NoAction)

  @@index([coupleId], map: "idx_messages_couple_id")
  @@index([senderId], map: "idx_messages_sender_id")
  @@index([sentAt], map: "idx_messages_sent_at")
  @@index([status], map: "idx_messages_status")
  @@index([thread_id], map: "idx_messages_thread_id")
  @@index([vendor_id], map: "idx_messages_vendor_id")
  @@map("messages")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity_feed {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id       String          @db.Uuid
  user_id         String?         @db.Uuid
  user_email      String
  user_name       String
  action_type     String
  entity_type     String
  entity_id       String          @db.Uuid
  entity_name     String?
  details         Json?           @default("{}")
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  is_read         Boolean?        @default(false)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([action_type], map: "idx_activity_feed_action_type")
  @@index([couple_id], map: "idx_activity_feed_couple_id")
  @@index([created_at(sort: Desc)], map: "idx_activity_feed_created_at")
  @@index([entity_type], map: "idx_activity_feed_entity_type")
  @@index([is_read], map: "idx_activity_feed_is_read")
  @@index([user_id], map: "idx_activity_feed_user_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model budget_items {
  id               String           @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id        String?          @db.Uuid
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?        @default(now()) @db.Timestamptz(6)
  category         String
  allocated_amount Decimal          @db.Decimal(10, 2)
  spent_amount     Decimal?         @default(0) @db.Decimal(10, 2)
  vendor_id        String?          @db.Uuid
  wedding_couples  wedding_couples? @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expenses         expenses[]

  @@index([couple_id], map: "idx_budget_items_couple_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model contracts {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id       String          @db.Uuid
  vendor_id       String?         @db.Uuid
  title           String          @db.VarChar(200)
  description     String?
  contract_url    String?
  amount          Decimal         @default(0) @db.Decimal(10, 2)
  signed_date     DateTime?       @db.Date
  signed_by       String?         @db.VarChar(100)
  status          String          @default("draft") @db.VarChar(20)
  due_date        DateTime?       @db.Date
  terms           String?
  notes           String?
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  couple_vendors  couple_vendors? @relation(fields: [vendor_id], references: [id], onUpdate: NoAction)

  @@index([couple_id], map: "idx_contracts_couple_id")
  @@index([due_date], map: "idx_contracts_due_date")
  @@index([status], map: "idx_contracts_status")
  @@index([vendor_id], map: "idx_contracts_vendor_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model couple_collaborators {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id        String          @db.Uuid
  user_id          String?         @db.Uuid
  email            String
  role             String
  permissions      String[]        @default(["view"])
  invited_by       String          @db.Uuid
  invited_at       DateTime?       @default(now()) @db.Timestamptz(6)
  accepted_at      DateTime?       @db.Timestamptz(6)
  status           String          @default("pending")
  invitation_token String?         @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples  wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([couple_id, email])
  @@index([couple_id], map: "idx_couple_collaborators_couple_id")
  @@index([invitation_token], map: "idx_couple_collaborators_invitation_token")
  @@index([status], map: "idx_couple_collaborators_status")
  @@index([user_id], map: "idx_couple_collaborators_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model couple_vendor_reviews {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_vendor_id String          @db.Uuid
  couple_id        String          @db.Uuid
  rating           Int
  title            String          @db.VarChar(255)
  content          String
  pros             String[]
  cons             String[]
  would_recommend  Boolean?        @default(true)
  event_date       DateTime?       @db.Date
  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples  wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  couple_vendors   couple_vendors  @relation(fields: [couple_vendor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model couple_vendor_tasks {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_vendor_id String          @db.Uuid
  couple_id        String          @db.Uuid
  title            String          @db.VarChar(255)
  description      String?
  due_date         DateTime        @db.Date
  completed        Boolean?        @default(false)
  completed_at     DateTime?       @db.Timestamptz(6)
  priority         String?         @default("medium") @db.VarChar(20)
  type             String?         @default("followup") @db.VarChar(20)
  assigned_to      String?         @default("couple") @db.VarChar(20)
  notes            String?
  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples  wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  couple_vendors   couple_vendors  @relation(fields: [couple_vendor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model couple_vendors {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id              String                  @db.Uuid
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @default(now()) @db.Timestamptz(6)
  name                   String                  @db.VarChar(255)
  business_name          String?                 @db.VarChar(255)
  category               String                  @default("other") @db.VarChar(50)
  specialty              String?                 @db.VarChar(255)
  contact_person         String?                 @db.VarChar(255)
  email                  String?                 @db.VarChar(255)
  phone                  String?                 @db.VarChar(50)
  website                String?
  address                String?
  city                   String?                 @db.VarChar(100)
  state                  String?                 @db.VarChar(100)
  zip_code               String?                 @db.VarChar(20)
  country                String?                 @default("United States") @db.VarChar(100)
  status                 String                  @default("researching") @db.VarChar(50)
  rating                 Decimal?                @db.Decimal(3, 2)
  price_range            String?                 @db.VarChar(20)
  estimated_cost         Decimal?                @db.Decimal(12, 2)
  actual_cost            Decimal?                @db.Decimal(12, 2)
  deposit_amount         Decimal?                @db.Decimal(12, 2)
  deposit_paid           Boolean?                @default(false)
  deposit_due_date       DateTime?               @db.Date
  final_payment_due      DateTime?               @db.Date
  budget_allocated       Decimal?                @db.Decimal(12, 2)
  budget_spent           Decimal?                @db.Decimal(12, 2)
  contract_signed        Boolean?                @default(false)
  contract_url           String?
  insurance_verified     Boolean?                @default(false)
  license_verified       Boolean?                @default(false)
  availability_confirmed Boolean?                @default(false)
  referral_source        String?                 @db.VarChar(255)
  meeting_date           DateTime?               @db.Date
  meeting_notes          String?
  proposal_details       String?
  contract_terms         String?
  cancellation_policy    String?
  services_provided      String[]                @default([])
  portfolio_urls         String[]                @default([])
  social_media_handles   Json?                   @default("{}")
  payment_schedule       Json?                   @default("[]")
  notes                  String?
  contracts              contracts[]
  couple_vendor_reviews  couple_vendor_reviews[]
  couple_vendor_tasks    couple_vendor_tasks[]
  wedding_couples        wedding_couples         @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages               Message[]
  receipts               receipts[]

  @@index([category], map: "idx_couple_vendors_category")
  @@index([couple_id], map: "idx_couple_vendors_couple_id")
  @@index([created_at], map: "idx_couple_vendors_created_at")
  @@index([status], map: "idx_couple_vendors_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model deadline_alerts {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id           String          @db.Uuid
  alert_type          String          @db.VarChar(30)
  title               String          @db.VarChar(200)
  description         String
  target_date         DateTime        @db.Date
  days_until_deadline Int             @default(0)
  severity            String          @db.VarChar(20)
  entity_type         String          @db.VarChar(30)
  entity_id           String          @db.Uuid
  entity_name         String          @db.VarChar(200)
  action_url          String          @db.VarChar(255)
  resolved            Boolean         @default(false)
  created_at          DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples     wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([alert_type], map: "idx_deadline_alerts_alert_type")
  @@index([couple_id], map: "idx_deadline_alerts_couple_id")
  @@index([entity_type], map: "idx_deadline_alerts_entity_type")
  @@index([resolved], map: "idx_deadline_alerts_resolved")
  @@index([severity], map: "idx_deadline_alerts_severity")
  @@index([target_date], map: "idx_deadline_alerts_target_date")
}

model exchange_rates {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  base_currency   String    @db.VarChar(3)
  target_currency String    @db.VarChar(3)
  rate            Decimal   @db.Decimal(15, 8)
  last_updated    DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([base_currency, target_currency], map: "unique_currency_pair")
  @@index([base_currency], map: "idx_exchange_rates_base")
  @@index([base_currency, target_currency], map: "idx_exchange_rates_pair")
  @@index([last_updated(sort: Desc)], map: "idx_exchange_rates_updated")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expenses {
  id              String           @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id       String?          @db.Uuid
  budget_item_id  String?          @db.Uuid
  vendor_id       String?          @db.Uuid
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  amount          Decimal          @db.Decimal(10, 2)
  description     String
  expense_date    DateTime         @db.Date
  payment_method  String?
  receipt_url     String?
  notes           String?
  budget_items    budget_items?    @relation(fields: [budget_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wedding_couples wedding_couples? @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([couple_id], map: "idx_expenses_couple_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model guest_group_members {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guest_id     String       @db.Uuid
  group_id     String       @db.Uuid
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)
  guest_groups guest_groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  guests       Guest        @relation(fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([guest_id, group_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model guest_groups {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id           String                @db.Uuid
  name                String                @db.VarChar(255)
  description         String?
  guest_ids           String[]              @default([]) @db.Uuid
  color               String?               @default("#3B82F6") @db.VarChar(7)
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  guest_group_members guest_group_members[]
  wedding_couples     wedding_couples       @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([couple_id], map: "idx_guest_groups_couple_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model inspiration_photos {
  id              String           @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id       String?          @db.Uuid
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  title           String
  description     String?
  image_url       String?
  tags            String[]
  notes           String?
  is_favorite     Boolean?         @default(false)
  wedding_couples wedding_couples? @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([couple_id], map: "idx_inspiration_photos_couple_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model milestones {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id       String          @db.Uuid
  title           String          @db.VarChar(200)
  description     String?
  target_date     DateTime        @db.Date
  completed       Boolean?        @default(false)
  color           String?         @default("#2196F3") @db.VarChar(7)
  icon            String?         @default("üéØ") @db.VarChar(10)
  task_ids        String[]        @default([]) @db.Uuid
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  completed_at    DateTime?       @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([completed], map: "idx_milestones_completed")
  @@index([couple_id], map: "idx_milestones_couple_id")
  @@index([target_date], map: "idx_milestones_target_date")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model legacy_notifications {
  id              String           @id(map: "notifications_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id       String?          @db.Uuid
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  title           String
  message         String
  type            String?
  read            Boolean?         @default(false)
  action_url      String?
  wedding_couples wedding_couples? @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([couple_id], map: "idx_legacy_notifications_couple_id")
  @@map("notifications")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model onboarding_progress {
  id              String          @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id       String          @db.Uuid
  step            String          @db.VarChar(50)
  completed       Boolean?        @default(false)
  completed_at    DateTime?       @db.Timestamptz(6)
  data            Json?           @default("{}")
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([couple_id, step])
  @@index([couple_id], map: "idx_onboarding_progress_couple_id")
  @@index([step], map: "idx_onboarding_progress_step")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model photo_comments {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  photo_id        String    @db.Uuid
  commenter_name  String
  commenter_email String?
  comment_text    String
  is_approved     Boolean?  @default(true)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  photos          Photo     @relation(fields: [photo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([photo_id], map: "idx_photo_comments_photo_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model photo_reactions {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  photo_id      String    @db.Uuid
  reactor_name  String?
  reactor_email String?
  reaction_type String
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  photos        Photo     @relation(fields: [photo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([photo_id, reactor_email, reaction_type])
  @@index([photo_id], map: "idx_photo_reactions_photo_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model photo_shares {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  photo_id          String      @db.Uuid
  album_id          String?     @db.Uuid
  shared_by_user_id String      @db.Uuid
  share_token       String      @unique
  share_type        String
  is_public         Boolean?    @default(false)
  password_hash     String?
  expires_at        DateTime?   @db.Timestamptz(6)
  view_count        Int?        @default(0)
  download_enabled  Boolean?    @default(true)
  created_at        DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?   @default(now()) @db.Timestamptz(6)
  photo_albums      PhotoAlbum? @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  photos            Photo       @relation(fields: [photo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([album_id], map: "idx_photo_shares_album_id")
  @@index([photo_id], map: "idx_photo_shares_photo_id")
  @@index([share_token], map: "idx_photo_shares_share_token")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model receipts {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id       String          @db.Uuid
  vendor_id       String?         @db.Uuid
  expense_id      String?         @db.Uuid
  title           String          @db.VarChar(200)
  description     String?
  amount          Decimal         @default(0) @db.Decimal(10, 2)
  receipt_url     String?
  receipt_date    DateTime        @db.Date
  payment_method  String?         @db.VarChar(50)
  category        String?         @db.VarChar(100)
  tax_amount      Decimal?        @default(0) @db.Decimal(10, 2)
  notes           String?
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  budget_expenses BudgetExpense?  @relation(fields: [expense_id], references: [id], onUpdate: NoAction)
  couple_vendors  couple_vendors? @relation(fields: [vendor_id], references: [id], onUpdate: NoAction)

  @@index([category], map: "idx_receipts_category")
  @@index([couple_id], map: "idx_receipts_couple_id")
  @@index([expense_id], map: "idx_receipts_expense_id")
  @@index([receipt_date], map: "idx_receipts_receipt_date")
  @@index([vendor_id], map: "idx_receipts_vendor_id")
}

model seating_arrangements {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id        String    @db.Uuid
  arrangement_data Json      @default("{}")
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tasks {
  id                         String           @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id                  String?          @db.Uuid
  created_at                 DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?        @default(now()) @db.Timestamptz(6)
  title                      String
  description                String?
  due_date                   DateTime?        @db.Date
  priority                   String?
  completed                  Boolean?         @default(false)
  category                   String?
  vendor_id                  String?          @db.Uuid
  icon                       String?
  estimated_duration         Int?
  actual_duration            Int?
  cost                       Decimal?         @db.Decimal(10, 2)
  notes                      String?
  attachments                Json?            @default("[]")
  completed_at               DateTime?        @db.Timestamptz(6)
  assigned_to                String?          @default("both") @db.VarChar(20)
  timeline_item_id           String?          @db.Uuid
  estimated_duration_minutes Int?             @default(60)
  actual_duration_minutes    Int?
  dependencies               String[]         @default([]) @db.Uuid
  is_critical_path           Boolean?         @default(false)
  buffer_time_minutes        Int?             @default(15)
  wedding_couples            wedding_couples? @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  timeline_items             timeline_items?  @relation(fields: [timeline_item_id], references: [id], onUpdate: NoAction)
  urgent_tasks               urgent_tasks[]

  @@index([completed], map: "idx_tasks_completed")
  @@index([couple_id], map: "idx_tasks_couple_id")
  @@index([due_date], map: "idx_tasks_due_date")
  @@index([timeline_item_id], map: "idx_tasks_timeline_item")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model timeline_events {
  id              String           @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id       String?          @db.Uuid
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?        @default(now()) @db.Timestamptz(6)
  title           String
  description     String?
  event_date      DateTime         @db.Date
  start_time      DateTime?        @db.Time(6)
  end_time        DateTime?        @db.Time(6)
  location        String?
  vendor_id       String?          @db.Uuid
  event_type      String?
  notes           String?
  wedding_couples wedding_couples? @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([couple_id], map: "idx_timeline_events_couple_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model timeline_items {
  id                    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id             String          @db.Uuid
  title                 String          @db.VarChar(200)
  description           String?
  start_time            DateTime        @db.Timestamptz(6)
  end_time              DateTime        @db.Timestamptz(6)
  duration_minutes      Int?            @default(dbgenerated("(EXTRACT(epoch FROM (end_time - start_time)) / (60)::numeric)"))
  category              String          @default("ceremony") @db.VarChar(50)
  location              String?         @db.VarChar(200)
  vendor_id             String?         @db.Uuid
  is_critical_path      Boolean?        @default(false)
  buffer_minutes        Int?            @default(15)
  dependencies          String[]        @db.Uuid
  assigned_to           String[]        @db.Uuid
  assignee_type         String?         @default("couple") @db.VarChar(20)
  status                String?         @default("planned") @db.VarChar(20)
  completion_percentage Int?            @default(0)
  color                 String?         @default("#2196F3") @db.VarChar(7)
  display_order         Int?            @default(0)
  is_private            Boolean?        @default(false)
  created_at            DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?       @default(now()) @db.Timestamptz(6)
  created_by            String?         @db.Uuid
  updated_by            String?         @db.Uuid
  completed             Boolean?        @default(false)
  due_date              DateTime?       @db.Date
  priority              String?         @default("medium") @db.VarChar(20)
  assigned_to_legacy    String?         @default("both") @db.VarChar(20)
  estimated_cost        Decimal?        @db.Decimal(10, 2)
  notes                 String?
  completed_at          DateTime?       @db.Timestamptz(6)
  duration              Int?
  vendor_ids            String[]        @db.Uuid
  tasks                 tasks[]
  wedding_couples       wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category], map: "idx_timeline_items_category")
  @@index([couple_id], map: "idx_timeline_items_couple_id")
  @@index([is_critical_path], map: "idx_timeline_items_critical_path")
  @@index([start_time], map: "idx_timeline_items_start_time")
  @@index([status], map: "idx_timeline_items_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model timeline_tasks {
  id              String          @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id       String          @db.Uuid
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  title           String          @db.VarChar(255)
  description     String?
  due_date        DateTime        @db.Date
  completed       Boolean?        @default(false)
  completed_at    DateTime?       @db.Timestamptz(6)
  category        String          @default("planning") @db.VarChar(100)
  priority        String          @default("medium") @db.VarChar(20)
  assigned_to     String?         @db.VarChar(20)
  estimated_cost  Decimal?        @db.Decimal(10, 2)
  vendor_id       String?         @db.Uuid
  notes           String?
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category], map: "idx_timeline_tasks_category")
  @@index([completed], map: "idx_timeline_tasks_completed")
  @@index([couple_id], map: "idx_timeline_tasks_couple_id")
  @@index([due_date], map: "idx_timeline_tasks_due_date")
  @@index([priority], map: "idx_timeline_tasks_priority")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model urgent_tasks {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id       String          @db.Uuid
  task_id         String?         @db.Uuid
  title           String          @db.VarChar(200)
  description     String
  urgency_level   String          @db.VarChar(20)
  due_date        DateTime        @db.Date
  days_remaining  Int             @default(0)
  task_type       String          @db.VarChar(30)
  action_required String
  completed       Boolean         @default(false)
  priority_score  Int             @default(0)
  reminder_sent   Boolean         @default(false)
  escalated       Boolean         @default(false)
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tasks           tasks?          @relation(fields: [task_id], references: [id], onUpdate: NoAction)

  @@index([completed], map: "idx_urgent_tasks_completed")
  @@index([couple_id], map: "idx_urgent_tasks_couple_id")
  @@index([due_date], map: "idx_urgent_tasks_due_date")
  @@index([priority_score], map: "idx_urgent_tasks_priority_score")
  @@index([task_id], map: "idx_urgent_tasks_task_id")
  @@index([urgency_level], map: "idx_urgent_tasks_urgency_level")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_preferences {
  id               String          @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id        String          @db.Uuid
  preference_type  String          @db.VarChar(50)
  preference_key   String          @db.VarChar(100)
  preference_value Json
  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples  wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([couple_id, preference_type, preference_key])
  @@index([couple_id], map: "idx_user_preferences_couple_id")
  @@index([preference_type, preference_key], map: "idx_user_preferences_type_key")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model vendor_documents {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendor_id     String    @db.Uuid
  couple_id     String    @db.Uuid
  document_type String    @db.VarChar(50)
  file_name     String    @db.VarChar(255)
  file_url      String
  file_size     Int?
  uploaded_by   String?   @db.VarChar(100)
  notes         String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  couples       Couple    @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model vendor_favorites {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couple_id       String          @db.Uuid
  vendor_id       String          @db.Uuid
  notes           String?
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([couple_id, vendor_id])
  @@index([couple_id], map: "idx_vendor_favorites_couple")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model vendor_inquiries {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendor_id       String          @db.Uuid
  couple_id       String          @db.Uuid
  event_date      DateTime?       @db.Date
  event_type      String?         @default("wedding") @db.VarChar(100)
  guest_count     Int?
  budget_range    String?         @db.VarChar(50)
  venue_name      String?         @db.VarChar(200)
  venue_location  String?         @db.VarChar(200)
  subject         String?         @db.VarChar(200)
  message         String
  status          String?         @default("sent") @db.VarChar(50)
  vendor_response String?
  quoted_price    Decimal?        @db.Decimal(10, 2)
  quote_details   String?
  sent_at         DateTime?       @default(now()) @db.Timestamptz(6)
  viewed_at       DateTime?       @db.Timestamptz(6)
  responded_at    DateTime?       @db.Timestamptz(6)
  quoted_at       DateTime?       @db.Timestamptz(6)
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  inquiry_type    String          @default("general") @db.VarChar(20)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([couple_id], map: "idx_vendor_inquiries_couple")
  @@index([inquiry_type], map: "idx_vendor_inquiries_inquiry_type")
  @@index([status], map: "idx_vendor_inquiries_status")
  @@index([vendor_id], map: "idx_vendor_inquiries_vendor")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model vendor_reviews {
  id                     String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendor_id              String          @db.Uuid
  couple_id              String          @db.Uuid
  reviewer_name          String?         @db.VarChar(200)
  overall_rating         Int
  communication_rating   Int?
  quality_rating         Int?
  value_rating           Int?
  professionalism_rating Int?
  title                  String?         @db.VarChar(200)
  review_text            String?
  pros                   String?
  cons                   String?
  event_date             DateTime?       @db.Date
  event_type             String?         @default("wedding") @db.VarChar(100)
  guest_count            Int?
  total_cost             Decimal?        @db.Decimal(10, 2)
  is_verified            Boolean?        @default(false)
  is_featured            Boolean?        @default(false)
  helpful_votes          Int?            @default(0)
  photos                 String[]
  created_at             DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples        wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([couple_id], map: "idx_vendor_reviews_couple")
  @@index([created_at(sort: Desc)], map: "idx_vendor_reviews_date")
  @@index([overall_rating(sort: Desc)], map: "idx_vendor_reviews_rating")
  @@index([vendor_id], map: "idx_vendor_reviews_vendor")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model vendor_tasks {
  id              String          @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  vendor_id       String          @db.Uuid
  couple_id       String          @db.Uuid
  title           String          @db.VarChar(255)
  description     String?
  due_date        DateTime        @db.Date
  completed       Boolean?        @default(false)
  priority        String?         @default("medium") @db.VarChar(20)
  type            String?         @default("followup") @db.VarChar(20)
  assigned_to     String?         @default("couple") @db.VarChar(20)
  notes           String?
  completed_at    DateTime?       @db.Timestamptz(6)
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  wedding_couples wedding_couples @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model wedding_couples {
  id                    String                  @id(map: "couples_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6)
  partner1_name         String
  partner2_name         String
  partner1_email        String?                 @unique(map: "couples_partner1_email_key") @default("")
  partner2_email        String?
  wedding_date          DateTime?               @db.Date
  venue                 String?
  has_venue             Boolean?
  estimated_guests      Int?
  total_budget          Decimal?                @db.Decimal(12, 2)
  planning_style        String?
  priorities            String[]
  onboarding_completed  Boolean?                @default(false)
  partner1_user_id      String?                 @db.Uuid
  partner2_user_id      String?                 @db.Uuid
  country               String?                 @db.VarChar(2)
  language              String?                 @db.VarChar(2)
  currency              String?                 @db.VarChar(3)
  date_format           String?                 @default("MM/DD/YYYY") @db.VarChar(20)
  time_format           String?                 @default("12h") @db.VarChar(3)
  timezone              String?                 @default("America/New_York") @db.VarChar(100)
  number_format         String?                 @default("US") @db.VarChar(2)
  region                String?                 @db.VarChar(50)
  activity_feed         activity_feed[]
  budgetCategories      BudgetCategory[]
  budgetExpenses        BudgetExpense[]
  budget_items          budget_items[]
  contracts             contracts[]
  couple_collaborators  couple_collaborators[]
  couple_vendor_reviews couple_vendor_reviews[]
  couple_vendor_tasks   couple_vendor_tasks[]
  couple_vendors        couple_vendors[]
  deadline_alerts       deadline_alerts[]
  expenses              expenses[]
  guest_groups          guest_groups[]
  inspiration_photos    inspiration_photos[]
  messages              Message[]
  milestones            milestones[]
  legacy_notifications  legacy_notifications[]
  onboarding_progress   onboarding_progress[]
  photos                Photo[]
  receipts              receipts[]
  tables                Table[]
  tasks                 tasks[]
  timeline_events       timeline_events[]
  timeline_items        timeline_items[]
  timeline_tasks        timeline_tasks[]
  urgent_tasks          urgent_tasks[]
  user_preferences      user_preferences[]
  vendor_favorites      vendor_favorites[]
  vendor_inquiries      vendor_inquiries[]
  vendor_reviews        vendor_reviews[]
  vendor_tasks          vendor_tasks[]
  wedding_guests        wedding_guests[]

  @@index([country], map: "idx_couples_country")
  @@index([created_at], map: "idx_couples_created_at")
  @@index([currency], map: "idx_couples_currency")
  @@index([language], map: "idx_couples_language")
  @@index([partner1_email], map: "idx_couples_partner1_email")
  @@index([partner1_user_id], map: "idx_couples_partner1_user_id")
  @@index([partner2_email], map: "idx_couples_partner2_email")
  @@index([partner2_user_id], map: "idx_couples_partner2_user_id")
  @@index([wedding_date], map: "idx_couples_wedding_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model wedding_guests {
  id                    String           @id(map: "guests_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  couple_id             String?          @db.Uuid
  created_at            DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?        @default(now()) @db.Timestamptz(6)
  name                  String
  email                 String?
  phone                 String?
  address               String?
  rsvp_status           String?
  rsvp_date             DateTime?        @db.Date
  guest_count           Int?             @default(1)
  dietary_restrictions  String?
  plus_one_name         String?
  table_assignment      String?
  notes                 String?
  category              String?          @default("family") @db.VarChar(50)
  side                  String?          @default("partner1") @db.VarChar(20)
  invitation_status     String?          @default("not_sent") @db.VarChar(20)
  plus_one_invited      Boolean?         @default(false)
  plus_one_rsvp         String?          @db.VarChar(20)
  accommodation_needed  Boolean?         @default(false)
  accommodation_details String?
  city                  String?          @db.VarChar(100)
  state                 String?          @db.VarChar(100)
  zip_code              String?          @db.VarChar(20)
  country               String?          @db.VarChar(100)
  first_name            String           @default("Unknown") @db.VarChar(100)
  last_name             String           @default("Unknown") @db.VarChar(100)
  relationship          String           @default("Guest") @db.VarChar(100)
  wedding_couples       wedding_couples? @relation(fields: [couple_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guests_couple_id_fkey")

  @@index([couple_id], map: "idx_guests_couple_id")
  @@index([rsvp_status], map: "idx_guests_rsvp_status")
}

// Notification system models
model Notification {
  id          String    @id(map: "notifications_new_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  coupleId    String    @map("couple_id") @db.Uuid
  type        String    @db.VarChar(100)
  title       String    @db.VarChar(255)
  message     String    @db.Text
  data        Json?
  read        Boolean   @default(false)
  readAt      DateTime? @map("read_at") @db.Timestamptz(6)
  priority    String    @default("medium") @db.VarChar(20)
  category    String    @db.VarChar(50)
  actionUrl   String?   @map("action_url") @db.Text
  actionLabel String?   @map("action_label") @db.VarChar(100)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz(6)

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  couple Couple @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_notifications_user_id")
  @@index([coupleId], map: "idx_notifications_couple_id")
  @@index([read], map: "idx_notifications_read")
  @@index([type], map: "idx_notifications_type")
  @@index([priority], map: "idx_notifications_priority")
  @@index([category], map: "idx_notifications_category")
  @@index([createdAt], map: "idx_notifications_created_at")
  @@index([expiresAt], map: "idx_notifications_expires_at")
  @@map("notifications_new")
}

model NotificationPreferences {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String   @unique @map("user_id") @db.Uuid
  emailNotifications  Boolean  @default(true) @map("email_notifications")
  pushNotifications   Boolean  @default(true) @map("push_notifications")
  smsNotifications    Boolean  @default(false) @map("sms_notifications")
  categories          Json     @default("{}")
  quietHours          Json     @default("{\"enabled\": false, \"startTime\": \"22:00\", \"endTime\": \"08:00\", \"timezone\": \"UTC\"}")
  frequency           Json     @default("{\"digest\": \"immediate\", \"reminders\": true}")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}
