
> wedding-planner-v3@0.1.0 dev
> next dev --port 4010

   â–² Next.js 15.4.5
   - Local:        http://localhost:4010
   - Network:      http://192.168.100.231:4010
   - Environments: .env

 âœ“ Starting...
 âœ“ Ready in 1750ms
 â—‹ Compiling /middleware ...
 âœ“ Compiled /middleware in 544ms (262 modules)
<w> [webpack.cache.PackFileCacheStrategy] Serializing big strings (160kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)
 â—‹ Compiling / ...
 âœ“ Compiled / in 3s (1148 modules)
 GET / 200 in 3711ms
 âœ“ Compiled in 733ms (381 modules)
 âœ“ Compiled /api/health in 308ms (1142 modules)
 GET /api/health 200 in 408ms
 â¨¯ ./src/app/(dashboard)/dashboard/page.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/atunbi/wedding-planner-v2/src/app/(dashboard)/dashboard/page.tsx[0m:210:1]
 [2m207[0m |           </div>
 [2m208[0m |         </div>
 [2m209[0m |       </div>
 [2m210[0m |     </div>
     : [35;1m     ^^^^^[0m
 [2m211[0m |   )
 [2m212[0m | }
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/app/(dashboard)/dashboard/page.tsx
 â¨¯ ./src/app/(dashboard)/dashboard/page.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/atunbi/wedding-planner-v2/src/app/(dashboard)/dashboard/page.tsx[0m:210:1]
 [2m207[0m |           </div>
 [2m208[0m |         </div>
 [2m209[0m |       </div>
 [2m210[0m |     </div>
     : [35;1m     ^^^^^[0m
 [2m211[0m |   )
 [2m212[0m | }
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/app/(dashboard)/dashboard/page.tsx
 â—‹ Compiling /_not-found ...
 â¨¯ ./src/app/(dashboard)/dashboard/page.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/atunbi/wedding-planner-v2/src/app/(dashboard)/dashboard/page.tsx[0m:210:1]
 [2m207[0m |           </div>
 [2m208[0m |         </div>
 [2m209[0m |       </div>
 [2m210[0m |     </div>
     : [35;1m     ^^^^^[0m
 [2m211[0m |   )
 [2m212[0m | }
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/app/(dashboard)/dashboard/page.tsx
 â¨¯ ./src/app/(dashboard)/dashboard/page.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/atunbi/wedding-planner-v2/src/app/(dashboard)/dashboard/page.tsx[0m:210:1]
 [2m207[0m |           </div>
 [2m208[0m |         </div>
 [2m209[0m |       </div>
 [2m210[0m |     </div>
     : [35;1m     ^^^^^[0m
 [2m211[0m |   )
 [2m212[0m | }
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/app/(dashboard)/dashboard/page.tsx
 GET /dashboard 500 in 2751ms
 GET /dashboard 500 in 9ms
 GET /dashboard 500 in 10ms
 GET /dashboard 500 in 7ms
 â¨¯ ./src/app/(dashboard)/dashboard/page.tsx
Error:   [31mx[0m Unterminated regexp literal
     ,-[[36;1;4m/Users/atunbi/wedding-planner-v2/src/app/(dashboard)/dashboard/page.tsx[0m:210:1]
 [2m207[0m |           </div>
 [2m208[0m |         </div>
 [2m209[0m |       </div>
 [2m210[0m |     </div>
     : [35;1m     ^^^^^[0m
 [2m211[0m |   )
 [2m212[0m | }
     `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/app/(dashboard)/dashboard/page.tsx
 GET /_next/static/webpack/01fb65cfcaae3e14.webpack.hot-update.json 500 in 699ms
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /api/dashboard/stats 500 in 716ms
 GET /dashboard 500 in 11ms
 âœ“ Compiled /api/dashboard/stats in 425ms (533 modules)
Clerk: Refreshing the session token resulted in an infinite redirect loop. This usually means that your Clerk instance keys do not match - make sure to copy the correct publishable and secret keys from the Clerk dashboard.
 GET /dashboard 500 in 17ms
 â¨¯ src/app/(dashboard)/dashboard/(client)/page.tsx
Can't resolve private-next-app-dir/(dashboard)/dashboard/page
 GET /_next/static/webpack/01fb65cfcaae3e14.webpack.hot-update.json 500 in 624ms
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /dashboard 500 in 15ms
 âœ“ Compiled in 1009ms (1479 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /_next/static/webpack/01fb65cfcaae3e14.webpack.hot-update.json 404 in 1316ms
 âœ“ Compiled /dashboard in 229ms (959 modules)
 GET /dashboard 200 in 438ms
 GET /dashboard 200 in 34ms
 âœ“ Compiled /api/user/initialize in 1138ms (1516 modules)
 âœ“ Compiled in 351ms (1525 modules)
 GET /dashboard 200 in 1032ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 4861ms
 âœ“ Compiled /api/dashboard/stats in 206ms (1007 modules)
API Error: Error [PrismaClientValidationError]: 
Invalid `prisma.user.findUnique()` invocation:

{
  where: {
    clerkId: "user_30ltuJfkwYqJOvGwpYgy96Rsr98",
    ~~~~~~~
?   id?: String,
?   clerk_user_id?: String,
?   email?: String,
?   AND?: UserWhereInput | UserWhereInput[],
?   OR?: UserWhereInput[],
?   NOT?: UserWhereInput | UserWhereInput[],
?   first_name?: StringNullableFilter | String | Null,
?   last_name?: StringNullableFilter | String | Null,
?   phone?: StringNullableFilter | String | Null,
?   preferences?: JsonNullableFilter,
?   created_at?: DateTimeFilter | DateTime,
?   updated_at?: DateTimeFilter | DateTime,
?   couples?: CoupleListRelationFilter,
?   sentMessages?: MessageListRelationFilter,
?   receivedMessages?: MessageRecipientListRelationFilter,
?   pushSubscriptions?: PushSubscriptionListRelationFilter
  }
}

Unknown argument `clerkId`. Available options are marked with ?.
    at async getAuthContext (src/lib/api/auth.ts:20:15)
    at async eval (src/lib/api/auth.ts:57:26)
  18 |
  19 |   // Get user from database
> 20 |   const user = await prisma.user.findUnique({
     |               ^
  21 |     where: { clerkId: clerkUserId }
  22 |   })
  23 | {
  clientVersion: '6.13.0'
}
 GET /api/dashboard/stats 500 in 417ms
 GET /dashboard 200 in 191ms
 GET /dashboard 200 in 58ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 1690ms
API Error: Error [PrismaClientValidationError]: 
Invalid `prisma.user.findUnique()` invocation:

{
  where: {
    clerkId: "user_30ltuJfkwYqJOvGwpYgy96Rsr98",
    ~~~~~~~
?   id?: String,
?   clerk_user_id?: String,
?   email?: String,
?   AND?: UserWhereInput | UserWhereInput[],
?   OR?: UserWhereInput[],
?   NOT?: UserWhereInput | UserWhereInput[],
?   first_name?: StringNullableFilter | String | Null,
?   last_name?: StringNullableFilter | String | Null,
?   phone?: StringNullableFilter | String | Null,
?   preferences?: JsonNullableFilter,
?   created_at?: DateTimeFilter | DateTime,
?   updated_at?: DateTimeFilter | DateTime,
?   couples?: CoupleListRelationFilter,
?   sentMessages?: MessageListRelationFilter,
?   receivedMessages?: MessageRecipientListRelationFilter,
?   pushSubscriptions?: PushSubscriptionListRelationFilter
  }
}

Unknown argument `clerkId`. Available options are marked with ?.
    at async getAuthContext (src/lib/api/auth.ts:20:15)
    at async eval (src/lib/api/auth.ts:57:26)
  18 |
  19 |   // Get user from database
> 20 |   const user = await prisma.user.findUnique({
     |               ^
  21 |     where: { clerkId: clerkUserId }
  22 |   })
  23 | {
  clientVersion: '6.13.0'
}
 GET /api/dashboard/stats 500 in 108ms
 âœ“ Compiled in 177ms (1007 modules)
 GET /dashboard 200 in 53ms
API Error: ApiException: Unauthorized
    at getAuthContext (src/lib/api/auth.ts:16:10)
    at async eval (src/lib/api/auth.ts:57:26)
  14 |   
  15 |   if (!clerkUserId) {
> 16 |     throw new UnauthorizedException()
     |          ^
  17 |   }
  18 |
  19 |   // Get user from database {
  statusCode: 401,
  code: 'UNAUTHORIZED',
  details: undefined
}
 GET /api/dashboard/stats 401 in 87ms
 GET /dashboard 200 in 153ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 1905ms
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."couples"."id", "public"."couples"."userId", "public"."couples"."partnerName", "public"."couples"."weddingDate", "public"."couples"."venue", "public"."couples"."location", "public"."couples"."expectedGuests", "public"."couples"."totalBudget", "public"."couples"."weddingStyle", "public"."couples"."onboardingCompleted", "public"."couples"."created_at", "public"."couples"."updated_at" FROM "public"."couples" WHERE "public"."couples"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query ROLLBACK
API Error: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.couple.findFirst()` invocation:


The column `couples.userId` does not exist in the current database.
    at async getAuthContext (src/lib/api/auth.ts:29:17)
    at async eval (src/lib/api/auth.ts:57:26)
  27 |
  28 |   // Get couple associated with user
> 29 |   const couple = await prisma.couple.findFirst({
     |                 ^
  30 |     where: { userId: user.id }
  31 |   })
  32 | {
  code: 'P2022',
  meta: [Object],
  clientVersion: '6.13.0'
}
 GET /api/dashboard/stats 500 in 1383ms
 GET /dashboard 200 in 49ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 1514ms
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."couples"."id", "public"."couples"."userId", "public"."couples"."partnerName", "public"."couples"."weddingDate", "public"."couples"."venue", "public"."couples"."location", "public"."couples"."expectedGuests", "public"."couples"."totalBudget", "public"."couples"."weddingStyle", "public"."couples"."onboardingCompleted", "public"."couples"."created_at", "public"."couples"."updated_at" FROM "public"."couples" WHERE "public"."couples"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query ROLLBACK
API Error: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.couple.findFirst()` invocation:


The column `couples.userId` does not exist in the current database.
    at async getAuthContext (src/lib/api/auth.ts:29:17)
    at async eval (src/lib/api/auth.ts:57:26)
  27 |
  28 |   // Get couple associated with user
> 29 |   const couple = await prisma.couple.findFirst({
     |                 ^
  30 |     where: { userId: user.id }
  31 |   })
  32 | {
  code: 'P2022',
  meta: [Object],
  clientVersion: '6.13.0'
}
 GET /api/dashboard/stats 500 in 1359ms
 GET /dashboard 200 in 58ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 1435ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."couples"."id", "public"."couples"."userId", "public"."couples"."partnerName", "public"."couples"."weddingDate", "public"."couples"."venue", "public"."couples"."location", "public"."couples"."expectedGuests", "public"."couples"."totalBudget", "public"."couples"."weddingStyle", "public"."couples"."onboardingCompleted", "public"."couples"."created_at", "public"."couples"."updated_at" FROM "public"."couples" WHERE "public"."couples"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query ROLLBACK
API Error: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.couple.findFirst()` invocation:


The column `couples.userId` does not exist in the current database.
    at async getAuthContext (src/lib/api/auth.ts:29:17)
    at async eval (src/lib/api/auth.ts:57:26)
  27 |
  28 |   // Get couple associated with user
> 29 |   const couple = await prisma.couple.findFirst({
     |                 ^
  30 |     where: { userId: user.id }
  31 |   })
  32 | {
  code: 'P2022',
  meta: [Object],
  clientVersion: '6.13.0'
}
 GET /api/dashboard/stats 500 in 1368ms
API Error: ApiException: Unauthorized
    at getAuthContext (src/lib/api/auth.ts:16:10)
    at async eval (src/lib/api/auth.ts:57:26)
  14 |   
  15 |   if (!clerkUserId) {
> 16 |     throw new UnauthorizedException()
     |          ^
  17 |   }
  18 |
  19 |   // Get user from database {
  statusCode: 401,
  code: 'UNAUTHORIZED',
  details: undefined
}
 GET /api/dashboard/stats 401 in 91ms
 âœ“ Compiled in 336ms (1005 modules)
 GET /dashboard 200 in 141ms
 âœ“ Compiled in 670ms (1550 modules)
 GET /dashboard 200 in 112ms
 âœ“ Compiled in 480ms (1516 modules)
 GET /dashboard 200 in 207ms
 âœ“ Compiled in 1026ms (1516 modules)
 GET /dashboard 200 in 105ms
 âœ“ Compiled in 389ms (1516 modules)
 GET /dashboard 200 in 60ms
 âœ“ Compiled in 936ms (1516 modules)
 GET /dashboard 200 in 58ms
 âœ“ Compiled in 528ms (1516 modules)
 GET /dashboard 200 in 148ms
 âœ“ Compiled in 757ms (1516 modules)
 GET /dashboard 200 in 81ms
 âœ“ Compiled in 783ms (1516 modules)
 GET /dashboard 200 in 133ms
 âœ“ Compiled in 557ms (1516 modules)
 GET /dashboard 200 in 150ms
 GET /dashboard 200 in 138ms
 âœ“ Compiled /api/health in 336ms (976 modules)
 GET /api/health 200 in 453ms
 GET /dashboard 200 in 236ms
 â—‹ Compiling /api/user/initialize ...
 âœ“ Compiled /api/user/initialize in 747ms (996 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 3107ms
prisma:query COMMIT
 âœ“ Compiled /api/dashboard/stats in 268ms (1007 modules)
 GET /dashboard 200 in 47ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."couples"."id", "public"."couples"."userId", "public"."couples"."partnerName", "public"."couples"."weddingDate", "public"."couples"."venue", "public"."couples"."location", "public"."couples"."expectedGuests", "public"."couples"."totalBudget", "public"."couples"."weddingStyle", "public"."couples"."onboardingCompleted", "public"."couples"."created_at", "public"."couples"."updated_at" FROM "public"."couples" WHERE "public"."couples"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query ROLLBACK
API Error: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.couple.findFirst()` invocation:


The column `couples.userId` does not exist in the current database.
    at async getAuthContext (src/lib/api/auth.ts:29:17)
    at async eval (src/lib/api/auth.ts:53:26)
  27 |
  28 |   // Get couple associated with user (optional - user might not have created profile yet)
> 29 |   const couple = await prisma.couple.findFirst({
     |                 ^
  30 |     where: { userId: user.id }
  31 |   })
  32 | {
  code: 'P2022',
  meta: [Object],
  clientVersion: '6.13.0'
}
 GET /api/dashboard/stats 500 in 1717ms
 âœ“ Compiled in 371ms (971 modules)
 âœ“ Compiled /api/dashboard/stats in 218ms (1005 modules)
API Error: ApiException: Unauthorized
    at getAuthContext (src/lib/api/auth.ts:16:10)
    at async eval (src/lib/api/auth.ts:53:26)
  14 |   
  15 |   if (!clerkUserId) {
> 16 |     throw new UnauthorizedException()
     |          ^
  17 |   }
  18 |
  19 |   // Get user from database {
  statusCode: 401,
  code: 'UNAUTHORIZED',
  details: undefined
}
 GET /api/dashboard/stats 401 in 441ms
 GET /dashboard 200 in 53ms
 GET /dashboard 200 in 178ms
 GET /dashboard 200 in 70ms
 âœ“ Compiled /api/user/initialize in 322ms (994 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 3964ms
prisma:query COMMIT
 âœ“ Compiled /api/dashboard/stats in 151ms (1007 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 899ms
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âœ“ Compiled in 1099ms (1552 modules)
 GET /dashboard 200 in 804ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 1471ms
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 713ms
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âœ“ Compiled in 648ms (1552 modules)
 GET /dashboard 200 in 493ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 1256ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 845ms
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âœ“ Compiled in 421ms (1552 modules)
 GET /dashboard 200 in 390ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 1718ms
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 725ms
 GET /dashboard 200 in 46ms
API Error: ApiException: Unauthorized
    at getAuthContext (src/lib/api/auth.ts:16:10)
    at async eval (src/lib/api/auth.ts:53:26)
  14 |   
  15 |   if (!clerkUserId) {
> 16 |     throw new UnauthorizedException()
     |          ^
  17 |   }
  18 |
  19 |   // Get user from database {
  statusCode: 401,
  code: 'UNAUTHORIZED',
  details: undefined
}
 GET /api/dashboard/stats 401 in 72ms
 GET /dashboard 200 in 54ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 2026ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 705ms
 GET /dashboard 200 in 58ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 1409ms
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 708ms
 âœ“ Compiled /api/health in 383ms (976 modules)
 GET /api/health 200 in 429ms
 âœ“ Compiled in 895ms (1521 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /dashboard 200 in 285ms
 âœ“ Compiled /api/user/initialize in 164ms (996 modules)
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 2085ms
prisma:query COMMIT
 âœ“ Compiled /api/dashboard/stats in 184ms (1009 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 938ms
 âœ“ Compiled in 736ms (1554 modules)
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 GET /dashboard 200 in 211ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 1462ms
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 711ms
API Error: ApiException: Unauthorized
    at getAuthContext (src/lib/api/auth.ts:16:10)
    at async eval (src/lib/api/auth.ts:53:26)
  14 |   
  15 |   if (!clerkUserId) {
> 16 |     throw new UnauthorizedException()
     |          ^
  17 |   }
  18 |
  19 |   // Get user from database {
  statusCode: 401,
  code: 'UNAUTHORIZED',
  details: undefined
}
 GET /api/dashboard/stats 401 in 87ms
 GET /dashboard 200 in 73ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 2482ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 700ms
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âœ“ Compiled in 959ms (1552 modules)
 GET /dashboard 200 in 628ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 1786ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 704ms
 â—‹ Compiling /dashboard/guests ...
 âœ“ Compiled /dashboard/guests in 1440ms (1754 modules)
 GET /dashboard/guests 200 in 1552ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 1654ms
 âœ“ Compiled /api/guests in 272ms (1757 modules)
prisma:query BEGIN
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:query COMMIT
 POST /api/user/initialize 200 in 2721ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."couples"."id", "public"."couples"."userId", "public"."couples"."partnerName", "public"."couples"."weddingDate", "public"."couples"."venue", "public"."couples"."location", "public"."couples"."expectedGuests", "public"."couples"."totalBudget", "public"."couples"."weddingStyle", "public"."couples"."onboardingCompleted", "public"."couples"."created_at", "public"."couples"."updated_at" FROM "public"."couples" WHERE "public"."couples"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query ROLLBACK
Error fetching guests: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.couple.findFirst()` invocation:


The column `couples.userId` does not exist in the current database.
    at async GET (src/app/api/guests/route.ts:21:19)
  19 |     }
  20 |
> 21 |     const couple = await prisma.couple.findFirst({
     |                   ^
  22 |       where: { userId: dbUser.id }
  23 |     })
  24 | {
  code: 'P2022',
  meta: [Object],
  clientVersion: '6.13.0'
}
 GET /api/guests 500 in 1870ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."couples"."id", "public"."couples"."userId", "public"."couples"."partnerName", "public"."couples"."weddingDate", "public"."couples"."venue", "public"."couples"."location", "public"."couples"."expectedGuests", "public"."couples"."totalBudget", "public"."couples"."weddingStyle", "public"."couples"."onboardingCompleted", "public"."couples"."created_at", "public"."couples"."updated_at" FROM "public"."couples" WHERE "public"."couples"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query ROLLBACK
Error fetching guests: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.couple.findFirst()` invocation:


The column `couples.userId` does not exist in the current database.
    at async GET (src/app/api/guests/route.ts:21:19)
  19 |     }
  20 |
> 21 |     const couple = await prisma.couple.findFirst({
     |                   ^
  22 |       where: { userId: dbUser.id }
  23 |     })
  24 | {
  code: 'P2022',
  meta: [Object],
  clientVersion: '6.13.0'
}
 GET /api/guests 500 in 1355ms
 âœ“ Compiled in 960ms (1732 modules)
 GET /dashboard/guests 200 in 204ms
 âœ“ Compiled in 365ms (655 modules)
 GET /dashboard/guests 200 in 26ms
 âœ“ Compiled in 215ms (655 modules)
 GET /dashboard/guests 200 in 26ms
 âœ“ Compiled in 306ms (655 modules)
 GET /dashboard/guests 200 in 27ms
 âœ“ Compiled in 291ms (655 modules)
 GET /dashboard/guests 200 in 41ms
 GET /dashboard/guests 200 in 232ms
 âœ“ Compiled /api/user/initialize in 424ms (1100 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 3420ms
prisma:query COMMIT
 âœ“ Compiled /api/guests in 291ms (1103 modules)
 GET /dashboard/guests 200 in 78ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/guests 200 in 1096ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/guests 400 in 856ms
 âœ“ Compiled in 843ms (1732 modules)
 GET /dashboard/guests 200 in 231ms
 âœ“ Compiled in 836ms (1732 modules)
 GET /dashboard/guests 200 in 91ms
 âœ“ Compiled /api/guests in 309ms (1100 modules)
 GET /dashboard/guests 200 in 55ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/guests 400 in 1313ms
 GET /dashboard 200 in 49ms
 âœ“ Compiled /api/user/initialize in 163ms (1102 modules)
prisma:query SELECT 1
 GET / 200 in 223ms
 POST /api/user/initialize 200 in 1665ms
 POST /api/user/initialize 200 in 1683ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 âœ“ Compiled in 727ms (1755 modules)
 GET / 200 in 160ms
 âœ“ Compiled in 580ms (1755 modules)
 GET / 200 in 63ms
 âœ“ Compiled in 254ms (655 modules)
 GET / 200 in 18ms
 âœ“ Compiled in 1638ms (1980 modules)
 â—‹ Compiling /api/dashboard/stats ...
 âœ“ Compiled /api/dashboard/stats in 685ms (1111 modules)
API Error: ApiException: Unauthorized
    at getAuthContext (src/lib/api/auth.ts:16:10)
    at async eval (src/lib/api/auth.ts:53:26)
  14 |   
  15 |   if (!clerkUserId) {
> 16 |     throw new UnauthorizedException()
     |          ^
  17 |   }
  18 |
  19 |   // Get user from database {
  statusCode: 401,
  code: 'UNAUTHORIZED',
  details: undefined
}
 GET /api/dashboard/stats 401 in 868ms
 âœ“ Compiled in 897ms (1766 modules)
 âœ“ Compiled in 604ms (1766 modules)
 âœ“ Compiled in 615ms (1766 modules)
 âœ“ Compiled in 730ms (1732 modules)
 GET /dashboard 200 in 187ms
 GET /dashboard 200 in 25ms
 GET /dashboard 200 in 20ms
 GET /dashboard 200 in 49ms
 âœ“ Compiled /api/user/initialize in 469ms (1100 modules)
 GET /dashboard 200 in 593ms
 GET /dashboard 200 in 12ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 2903ms
 POST /api/user/initialize 200 in 3004ms
prisma:query COMMIT
 âœ“ Compiled /api/dashboard/stats in 201ms (1113 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 964ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 737ms
 POST /dashboard 200 in 81ms
 GET / 200 in 37ms
 GET / 200 in 13ms
 â—‹ Compiling /sign-up/[[...sign-up]] ...
 âœ“ Compiled /sign-up/[[...sign-up]] in 528ms (1761 modules)
 GET /sign-up 200 in 1223ms
 â—‹ Compiling /sign-in/[[...sign-in]] ...
 âœ“ Compiled /sign-in/[[...sign-in]] in 538ms (1732 modules)
 GET /sign-in 200 in 1237ms
 POST /sign-in 200 in 97ms
 GET /dashboard 200 in 27ms
 âœ“ Compiled /api/user/initialize in 247ms (1110 modules)
 GET /dashboard 200 in 845ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 4019ms
prisma:query COMMIT
 âœ“ Compiled /api/dashboard/stats in 297ms (1123 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 1081ms
 âœ“ Compiled in 508ms (659 modules)
 GET /dashboard 200 in 62ms
 âœ“ Compiled in 1565ms (1994 modules)
 GET /dashboard 200 in 1515ms
 GET /dashboard 200 in 40ms
 âœ“ Compiled in 138ms (262 modules)
<w> [webpack.cache.PackFileCacheStrategy] Serializing big strings (160kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)
 âœ“ Compiled in 377ms (659 modules)
 GET /dashboard 200 in 22ms
 GET /dashboard 200 in 187ms
 âœ“ Compiled /api/user/initialize in 484ms (1110 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 3885ms
 âœ“ Compiled /api/dashboard/stats in 210ms (1123 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 971ms
 POST /dashboard 200 in 125ms
 GET / 200 in 37ms
 GET / 200 in 20ms
 GET /sign-in 200 in 42ms
 POST /sign-in 200 in 27ms
 GET /dashboard 200 in 15ms
 GET /dashboard 200 in 26ms
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 1716ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 718ms
 â—‹ Compiling /dashboard/budget ...
 âœ“ Compiled /dashboard/budget in 1352ms (1874 modules)
 GET /dashboard/budget 200 in 1185ms
 GET /dashboard/budget 200 in 1541ms
 GET /dashboard/budget 200 in 3216ms
   Reload env: .env
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âœ“ Compiled in 5.1s (2125 modules)
 GET /dashboard/budget 200 in 1147ms
 GET /dashboard/budget 200 in 4286ms
   Reload env: .env.local
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âœ“ Compiled in 3.8s (2125 modules)
 GET /dashboard/budget 200 in 527ms
 GET /dashboard/budget 200 in 2972ms
<w> [webpack.cache.PackFileCacheStrategy] Serializing big strings (160kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)
 GET /dashboard 200 in 46ms
 âœ“ Compiled /api/user/initialize in 489ms (1210 modules)
prisma:query SELECT 1
prisma:query BEGIN
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 3603ms
 POST /api/user/initialize 200 in 3642ms
prisma:query COMMIT
 âœ“ Compiled /api/dashboard/stats in 358ms (1223 modules)
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 1137ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 714ms
 GET /sign-in 200 in 67ms
 GET /dashboard 200 in 23ms
prisma:query BEGIN
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 POST /api/user/initialize 200 in 1034ms
 POST /api/user/initialize 200 in 1107ms
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 769ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 718ms
 POST /dashboard 200 in 68ms
 âœ“ Compiled / in 439ms (1228 modules)
 GET / 200 in 547ms
 GET / 200 in 13ms
 GET /sign-in 200 in 37ms
 POST /sign-in 200 in 65ms
 GET /dashboard 200 in 22ms
 GET /dashboard 200 in 26ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/user/initialize 200 in 1289ms
prisma:query COMMIT
prisma:query SELECT 1
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."users"."id", "public"."users"."clerk_user_id", "public"."users"."email", "public"."users"."first_name", "public"."users"."last_name", "public"."users"."phone", "public"."users"."preferences", "public"."users"."created_at", "public"."users"."updated_at" FROM "public"."users" WHERE ("public"."users"."clerk_user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
 GET /api/dashboard/stats 200 in 929ms
 âœ“ Compiled in 249ms (262 modules)
 âœ“ Compiled in 162ms (268 modules)
 âœ“ Compiled in 104ms (262 modules)
<w> [webpack.cache.PackFileCacheStrategy] Serializing big strings (160kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)
