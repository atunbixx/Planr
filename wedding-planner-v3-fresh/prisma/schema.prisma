// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Wedding Planner Core Models
model User {
  id         String   @id @default(cuid())
  clerkId    String   @unique
  email      String   @unique
  firstName  String?
  lastName   String?
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Wedding relationship
  couples    Couple[]

  @@map("users")
}

model Couple {
  id              String   @id @default(cuid())
  weddingDate     DateTime?
  venue           String?
  budget          Decimal? @db.Decimal(10, 2)
  guestCount      Int?
  status          String   @default("planning") // planning, confirmed, completed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Users in this couple
  users           User[]
  
  // Related data
  guests          Guest[]
  vendors         Vendor[]
  budgetItems     BudgetItem[]
  checklist       ChecklistItem[]

  @@map("couples")
}

model Guest {
  id            String  @id @default(cuid())
  coupleId      String
  firstName     String
  lastName      String
  email         String?
  phone         String?
  rsvpStatus    String  @default("pending") // pending, attending, not_attending
  dietaryReqs   String?
  plusOne       Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  couple        Couple  @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("guests")
}

model Vendor {
  id          String   @id @default(cuid())
  coupleId    String
  name        String
  category    String   // photographer, caterer, florist, etc.
  email       String?
  phone       String?
  website     String?
  cost        Decimal? @db.Decimal(10, 2)
  status      String   @default("researching") // researching, contacted, booked
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model BudgetItem {
  id          String   @id @default(cuid())
  coupleId    String
  category    String
  name        String
  estimated   Decimal? @db.Decimal(10, 2)
  actual      Decimal? @db.Decimal(10, 2)
  paid        Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("budget_items")
}

model ChecklistItem {
  id          String   @id @default(cuid())
  coupleId    String
  title       String
  description String?
  completed   Boolean  @default(false)
  dueDate     DateTime?
  priority    String   @default("medium") // low, medium, high
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}
